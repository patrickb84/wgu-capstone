() => {
	const [startDate, setStartDate] = useState(new Date());
	return (
	  <DatePicker
		selected={startDate}
		onChange={date => setStartDate(date)}
		excludeDateIntervals={[{start: subDays(new Date(), 5), end: addDays(new Date(), 5) }]}
		placeholderText="Select a date other than the interval from 5 days ago to 5 days in the future"
	  />
	);
};
  

() => {
    const [startDate, setStartDate] = useState(null);
    return (
      <DatePicker
        selected={startDate}
        onChange={(date) => setStartDate(date)}
        minDate={subDays(new Date(), 5)}
        placeholderText="Select a date after 5 days ago"
      />
    );
};
  

() => {
    const [startDate, setStartDate] = useState(new Date());
    return (
      <DatePicker
        selected={startDate}
        onChange={(date) => setStartDate(date)}
        maxDate={addDays(new Date(), 5)}
        placeholderText="Select a date before 5 days in the future"
      />
    );
};
  

// no anchor arrow

() => {
  const [startDate, setStartDate] = useState(new Date());
  return (
    <DatePicker
      showPopperArrow={false}
      selected={startDate}
      onChange={(date) => setStartDate(date)}
    />
  );
};



// open to date
() => {
  const [startDate, setStartDate] = useState(null);
  return (
    <DatePicker
      selected={startDate}
      onChange={(date) => setStartDate(date)}
      openToDate={new Date("1993/09/28")}
    />
  );
};

//date range 1 DatePicker
() => {
  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(null);
  const onChange = (dates) => {
    const [start, end] = dates;
    setStartDate(start);
    setEndDate(end);
  };
  return (
    <DatePicker
      selected={startDate}
      onChange={onChange}
      startDate={startDate}
      endDate={endDate}
      selectsRange
      inline
    />
  );
};

// inline = stay open
() => {
  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(null);
  const onChange = (dates) => {
    const [start, end] = dates;
    setStartDate(start);
    setEndDate(end);
  };
  return (
    <DatePicker
      selected={startDate}
      onChange={onChange}
      startDate={startDate}
      endDate={endDate}
      excludeDates={[addDays(new Date(), 1), addDays(new Date(), 5)]}
      selectsRange
      selectsDisabledDaysInRange
      inline
    />
  );
};



//dont hide on select
() => {
  const [startDate, setStartDate] = useState(new Date());
  return (
    <DatePicker
      selected={startDate}
      onChange={(date) => setStartDate(date)}
      shouldCloseOnSelect={false}
    />
  );
};


// Highlight dates with custom class names and ranges

() => {
  const [startDate, setStartDate] = useState(new Date());
  const highlightWithRanges = [
    {
      "react-datepicker__day--highlighted-custom-1": [
        subDays(new Date(), 4),
        subDays(new Date(), 3),
        subDays(new Date(), 2),
        subDays(new Date(), 1),
      ],
    },
    {
      "react-datepicker__day--highlighted-custom-2": [
        addDays(new Date(), 1),
        addDays(new Date(), 2),
        addDays(new Date(), 3),
        addDays(new Date(), 4),
      ],
    },
  ];
  return (
    <DatePicker
      selected={startDate}
      
      onChange={(date) => setStartDate(date)}
      highlightDates={highlightWithRanges}
      placeholderText="This highlight two ranges with custom classes"
    />
  );
};